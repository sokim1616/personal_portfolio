{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","to","path","Github","Blog","Home","src","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAIe,SAASA,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,yBAAKC,UAAU,OACb,wBAAIA,UAAU,SAAd,8BACA,yBAAKA,UAAU,QAAf,mOAIA,4BAAQA,UAAU,UAChB,6BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,UAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,UAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,oBAON,kBAAC,IAAD,KACG,IAED,kBAAC,IAAD,CAAOC,KAAK,WACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,SACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,KACV,kBAACG,EAAD,UAQZ,SAASA,IACP,OACE,yBAAKL,UAAU,WACb,yBAAKA,UAAU,QACb,6BACE,yBAAKA,UAAU,QAAQM,IAAI,+BAE7B,yBAAKN,UAAU,aAAf,iNASR,SAASI,IACP,OACE,6BACE,yBAAKJ,UAAU,WAAf,gBAEE,6BACE,uBAAGO,KAAK,uCAAR,wCAIF,yBAAKP,UAAU,QACb,6BACE,yBACEA,UAAU,aACVM,IAAI,iFASlB,SAASH,IACP,OACE,6BACE,yBAAKH,UAAU,WAAf,aAEE,6BACE,uBAAGO,KAAK,gCAAR,cAEF,yBAAKP,UAAU,QACb,6BACE,yBACEA,UAAU,eACVM,IAAI,4DCtFEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAChB,EAAD,OAEFiB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.052471db.chunk.js","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n//import Toggle from \"./Toggle\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"nav\">\n          <h2 className=\"title\">Welcome to So Hyun's World</h2>\n          <div className=\"desc\">\n            안녕하세요, 저는 햇뵹아리 프로그래머 입니다. 누추한 곳에\n            찾아와주셔서 감사합니다^~^\n          </div>\n          <header className=\"header\">\n            <div>\n              <Link to=\"/\">Home </Link>\n            </div>\n            <div>\n              <Link to=\"/blog\">BLOG </Link>\n            </div>\n            <div>\n              <Link to=\"/github\">Let's GITit!!</Link>\n            </div>\n          </header>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          {\" \"}\n          {/* 주소로 가는 부분 */}\n          <Route path=\"/github\">\n            <Github />\n          </Route>\n          <Route path=\"/blog\">\n            <Blog />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <div className=\"content\">\n      <div className=\"grid\">\n        <div>\n          <img className=\"image\" src=\"https://picsum.photos/500\"></img>\n        </div>\n        <div className=\"home-text\">\n          제 블로그와 깃헙을 보시고 싶으시다면 해당하는 메뉴바를 클릭해주세요~\n          (삐약)\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Blog() {\n  return (\n    <div>\n      <div className=\"content\">\n        Blog Address:\n        <div>\n          <a href=\"http://programming24-7.tistory.com/\">\n            http://programming24-7.tistory.com/\n          </a>\n        </div>\n        <div className=\"grid\">\n          <div>\n            <img\n              className=\"blog-image\"\n              src=\"https://signatureiow.marketing/wp-content/uploads/2018/05/Oli-Blog-2.jpg\"\n            ></img>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Github() {\n  return (\n    <div>\n      <div className=\"content\">\n        Github ID:\n        <div>\n          <a href=\"https://github.com/sokim1616\">sokim1616</a>\n        </div>\n        <div className=\"grid\">\n          <div>\n            <img\n              className=\"github-image\"\n              src=\"https://miro.medium.com/max/1400/0*c9HBMW0byk5LRouy\"\n            ></img>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n//export default App;\n\n// import React from \"react\";\n// import ReadContent from \"../build/ReadContent\";\n// import logo from \"./logo.svg\";\n// import \"./App.css\";\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       mode: \"welcome\",\n//       welcome: {\n//         title: \"Welcome to So Hyun's World\",\n//         desc:\n//           \"안녕하세요, 저는 햇뵹아리 프로그래머 입니다. 누추한 곳에 찾아와주셔서 감사합니다^~^\",\n//       },\n//     };\n//   }\n\n//   render() {\n//     let _title,\n//       _desc,\n//       _article = null;\n//     if (this.state.mode === \"welcome\") {\n//       _title = this.state.welcome.title;\n//       _desc = this.state.welcome.desc;\n//       _article = <ReadContent title={_title} desc={_desc}></ReadContent>;\n//     }\n//     return <div className=\"App\">{_article}</div>;\n//   }\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}